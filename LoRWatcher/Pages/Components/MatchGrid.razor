@namespace LoRWatcherComponents

@using LoRWatcher.Caches;
@using LoRWatcher.Events
@using LoRWatcher.Pages
@using LoRWatcher.Services
@using LoRWatcher.Stores;
@using LoRWatcher.Utils;
@using System.Threading;
@using System.Diagnostics;

@inject IWatcherService watcherService
@inject IWatcherEventHandler watcherEventHandler
@inject NavigationManager navigationManager

@if (matchReports != null)
{
    <DataGrid TItem="MatchReport"
          Data="@matchReports"
          ShowPager="@showPager"
          PageSize="@RazorConstants.PageSize"
          ReadData="@(async (e) => await OnReadData(e))"
          CurrentPage="@CurrentPage"
          PageChanged="@PageChanged"
          TotalItems="@TotalGames"
          @bind-SelectedRow="@selectedMatchReport"
          RowSelectable="@((matchReport) => this.RowSelected(matchReport.Item))"
          Hoverable="true"
          Filterable="true"
          Sortable="true"
          SortMode="DataGridSortMode.Single">
        <DataGridCommandColumn TItem="MatchReport" />
        <DataGridColumn Filterable="false" Sortable="false" CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" Width="140px" TItem="MatchReport" Field="@nameof(MatchReport.FinishTime)" Caption="Finish Time">
            <DisplayTemplate>
                @((context as MatchReport)?.FinishTime.UtcDateTime.GetTimeSince() ?? string.Empty)
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.OpponentName)" Caption="Opponent Name">
            <DisplayTemplate>
                @((context as MatchReport)?.OpponentName)
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))"  Width="50px" TItem="MatchReport" Field="@nameof(MatchReport.ResultText)" Caption="Result">
            <DisplayTemplate>
                @((context as MatchReport)?.ResultText)
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.RegionsText)" Caption="Regions">
            <DisplayTemplate>
                @{
                    var cards = (context as MatchReport)?.PlayerDeckCode.GetCardsFromCode();
                    <Row Style="margin: auto">
                        @foreach (var regions in CardExtensions.GetRegionsData(cards))
                        {
                            <Tooltip Style="margin: 0px 2px; border-radius: 2px; border: solid 1px rgba(0, 0, 0, 0.1);" Text=@(string.Join(", ", regions.Regions))>
                                @foreach (var regionRefs in regions.RegionRefs)
                                {
                                    <img Style="max-height: 18px;" src="@($"./assets/core-en_us/en_us/img/regions/icon-{regionRefs.ToLower()}.png")">
                                }
                            </Tooltip>
                        }
                    </Row>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.Type)" Caption="Type">
            <DisplayTemplate>
                @((context as MatchReport)?.Type)
            </DisplayTemplate>
        </DataGridColumn>
    </DataGrid>
}

@code {
    [Parameter]
    public int TotalGames { get; set; }

    [Parameter]
    public IEnumerable<MatchReport> InitialMatchReports { get; set; }

    public int CurrentPage { get; set; } = 1;

    private const string Source = "MatchGrid";

    private bool showPager = true;

    private MatchReport selectedMatchReport;

    private IEnumerable<MatchReport> matchReports;

    private int skip;

    private string opponentNameFilter = null;

    private string resultFilter = null;

    private string regionsFilter = null;

    private string gameTypeFilter = null;

    protected override void OnInitialized()
    {
        this.RegisterEvents();

        var stopwatch = Stopwatch.StartNew();
        this.matchReports = this.InitialMatchReports;
        var elapsed = stopwatch.Elapsed;
    }

    private void RegisterEvents()
    {
        this.watcherEventHandler.TryAddEvent(WatcherEvents.GameFinished, Source, async () =>
        {
            await this.GetMatchReportsAsync();
        });

        this.watcherEventHandler.TryAddEvent(WatcherEvents.GamesSynced, Source, async () =>
        {
            await this.GetMatchReportsAsync();
        });
    }

    private async Task GetMatchReportsAsync()
    {
        var matchReportsResult = await this.watcherService.GetMatchReportsAsync(this.skip, RazorConstants.PageSize, cancellationToken: CancellationToken.None); ;
        this.matchReports = matchReportsResult.Matches;

#pragma warning disable CS4014
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
#pragma warning restore CS4014
    }

    private async Task OnReadData(DataGridReadDataEventArgs<MatchReport> e)
    {
        var filtersChanged = false;

        var opponentNameColumn = e.Columns.FirstOrDefault(column => column.Field == nameof(MatchReport.OpponentName));
        var opponentNameSortDirection = (int)opponentNameColumn.SortDirection;
        var opponentNameFilter = opponentNameColumn.SearchValue?.ToString();
        if (this.opponentNameFilter != opponentNameFilter)
        {
            this.opponentNameFilter = opponentNameFilter;
            filtersChanged = true;
        }

        var resultColumn = e.Columns.FirstOrDefault(column => column.Field == nameof(MatchReport.ResultText));
        var resultSortDirection = (int)resultColumn.SortDirection;
        var resultFilter = resultColumn.SearchValue?.ToString();
        if (this.resultFilter != resultFilter)
        {
            this.resultFilter = resultFilter;
            filtersChanged = true;
        }

        var regionsColumn = e.Columns.FirstOrDefault(column => column.Field == nameof(MatchReport.RegionsText));
        var regionsSortDirection = (int)regionsColumn.SortDirection;
        var regionsFilter = regionsColumn.SearchValue?.ToString();
        if (this.regionsFilter != regionsFilter)
        {
            this.regionsFilter = regionsFilter;
            filtersChanged = true;
        }

        var gameTypeColumn = e.Columns.FirstOrDefault(column => column.Field == nameof(MatchReport.Type));
        var gameTypeSortDirection = (int)gameTypeColumn.SortDirection;
        var gameTypeFilter = gameTypeColumn.SearchValue?.ToString();
        if (this.gameTypeFilter != gameTypeFilter)
        {
            this.gameTypeFilter = gameTypeFilter;
            filtersChanged = true;
        }

        // TODO: Update metadata graph based on this

        if (filtersChanged == true)
        {
            this.skip = 0;
            this.CurrentPage = 1;
        }
        else
        {
            this.skip = RazorConstants.PageSize * (e.Page - 1);
        }

        var matchReportsResult = await this.watcherService.GetMatchReportsAsync(
            this.skip,
            RazorConstants.PageSize,
            opponentNameFilter,
            opponentNameSortDirection,
            resultFilter,
            resultSortDirection,
            regionsFilter,
            regionsSortDirection,
            gameTypeFilter,
            gameTypeSortDirection,
            CancellationToken.None);

        this.matchReports = matchReportsResult.Matches;
        this.TotalGames = matchReportsResult.Count;
    }

    private void PageChanged(DataGridPageChangedEventArgs e)
    {
        this.CurrentPage = e.Page;
    }

    private bool RowSelected(MatchReport matchReport)
    {
        this.navigationManager.NavigateTo($"/match/{matchReport.Id}");

        return false;
    }

    private string GetMatchReportCellClass(MatchReport matchReport)
    {
        return matchReport.Result ? "text-primary" : "text-danger";
    }
}
