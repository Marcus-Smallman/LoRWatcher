@namespace LoRWatcherComponents

@using LoRWatcher.Caches;
@using LoRWatcher.Events
@using LoRWatcher.Pages
@using LoRWatcher.Services
@using LoRWatcher.Stores;
@using LoRWatcher.Utils;
@using System.Threading;
@using System.Diagnostics;

@inject IWatcherService watcherService
@inject IWatcherEventHandler watcherEventHandler
@inject NavigationManager navigationManager

@if (matchReports != null)
{
    <DataGrid TItem="ServiceMatchReport"
          Data="@matchReports"
          ShowPager="@showPager"
          PageSize="@RazorConstants.PageSize"
          ReadData="@OnReadData"
          TotalItems="@TotalGames"
          @bind-SelectedRow="@selectedMatchReport"
          RowSelectable="@((matchReport) => this.RowSelected(matchReport.Item))"
          Hoverable="true"
          Filterable="true"
          Sortable="true"
          SortMode="DataGridSortMode.Single">
        <DataGridCommandColumn TItem="ServiceMatchReport" />
        <DataGridColumn Filterable="false" Sortable="false" CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="ServiceMatchReport" Field="@nameof(ServiceMatchReport.FinishTime)" Caption="Finish Time">
            <DisplayTemplate>
                @((context as ServiceMatchReport)?.FinishTime.UtcDateTime.GetTimeSince() ?? string.Empty)
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="ServiceMatchReport" Field="@nameof(ServiceMatchReport.OpponentName)" Caption="Opponent Name">
            <DisplayTemplate>
                @((context as ServiceMatchReport)?.OpponentName.GetCardNameOpponentName())
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="ServiceMatchReport" Field="@nameof(ServiceMatchReport.Result)" Caption="Result">
            <DisplayTemplate>
                @((context as ServiceMatchReport)?.Result == true ? "Won" : "Lost")
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="ServiceMatchReport" Field="@nameof(ServiceMatchReport.Regions)" Caption="Regions">
            <DisplayTemplate>
                @{
                    var cards = (context as ServiceMatchReport)?.PlayerDeckCode.GetCardsFromCode();
                    <Row Style="margin: auto">
                        @foreach (var regions in this.GetCardRegions(cards))
                        {
                            <Tooltip Style="margin: 0px 2px; border-radius: 2px; border: solid 1px rgba(0, 0, 0, 0.1);" Text=@(string.Join(", ", regions.Regions))>
                                @foreach (var regionRefs in regions.RegionRefs)
                                {
                                    <img Style="max-height: 18px;" src="@($"./assets/core-en_us/en_us/img/regions/icon-{regionRefs.ToLower()}.png")">
                                }
                            </Tooltip>
                        }
                    </Row>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="ServiceMatchReport" Field="@nameof(ServiceMatchReport.GameType)" Caption="Type">
            <DisplayTemplate>
                @(this.GetGameType((context as ServiceMatchReport)))
            </DisplayTemplate>
        </DataGridColumn>
    </DataGrid>
}

@code {
    [Parameter]
    public int TotalGames { get; set; }

    [Parameter]
    public IEnumerable<ServiceMatchReport> InitialMatchReports { get; set; }

    private const string Source = "MatchGrid";

    private bool showPager = true;

    private ServiceMatchReport selectedMatchReport;

    private IEnumerable<ServiceMatchReport> matchReports;

    private int skip;

    protected override void OnInitialized()
    {
        this.RegisterEvents();

        var stopwatch = Stopwatch.StartNew();
        this.matchReports = this.InitialMatchReports;
        var elapsed = stopwatch.Elapsed;
    }

    private void RegisterEvents()
    {
        this.watcherEventHandler.TryAddEvent(WatcherEvents.GameFinished, Source, async () =>
        {
            await this.GetMatchReportsAsync();
        });

        this.watcherEventHandler.TryAddEvent(WatcherEvents.GamesSynced, Source, async () =>
        {
            await this.GetMatchReportsAsync();
        });
    }

    private async Task GetMatchReportsAsync()
    {
        this.matchReports = await this.watcherService.GetMatchReportsAsync(this.skip, RazorConstants.PageSize, cancellationToken: CancellationToken.None);

#pragma warning disable CS4014
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
#pragma warning restore CS4014
    }

    private string GetGameType(ServiceMatchReport serviceMatchReport)
    {
        var result = serviceMatchReport?.GameMode;
        if (string.IsNullOrEmpty(serviceMatchReport?.GameType) == false)
        {
            result += $" ({serviceMatchReport?.GameType})";
        }

        return result;
    }

    private async Task OnReadData(DataGridReadDataEventArgs<ServiceMatchReport> e)
    {
        // TODO: Support filtering and sorting

        var opponentNameColumn = e.Columns.FirstOrDefault(column => column.Field == nameof(ServiceMatchReport.OpponentName));
        var opponentNameFilter = opponentNameColumn.SearchValue?.ToString();
        var opponentNameSortDirection = (int)opponentNameColumn.SortDirection;

        var resultColumn = e.Columns.FirstOrDefault(column => column.Field == nameof(ServiceMatchReport.Result));
        var resultFilter = resultColumn.SearchValue?.ToString();
        var resultSortDirection = (int)resultColumn.SortDirection;

        var regionsColumn = e.Columns.FirstOrDefault(column => column.Field == nameof(ServiceMatchReport.Regions));
        var regionsFilter = regionsColumn.SearchValue?.ToString();
        var regionsSortDirection = (int)regionsColumn.SortDirection;

        var gameTypeColumn = e.Columns.FirstOrDefault(column => column.Field == nameof(ServiceMatchReport.GameType));
        var gameTypeFilter = gameTypeColumn.SearchValue?.ToString();
        var gameTypeSortDirection = (int)gameTypeColumn.SortDirection;

        // TODO: Finish this search and update metadata graph based on this

        this.skip = RazorConstants.PageSize * (e.Page - 1);
        this.matchReports = await this.watcherService.GetMatchReportsAsync(
            this.skip,
            RazorConstants.PageSize,
            opponentNameFilter,
            opponentNameSortDirection,
            resultFilter,
            resultSortDirection,
            regionsFilter,
            regionsSortDirection,
            gameTypeFilter,
            gameTypeSortDirection,
            CancellationToken.None);

        StateHasChanged();
    }

    private bool RowSelected(ServiceMatchReport matchReport)
    {
        this.navigationManager.NavigateTo($"/match/{matchReport.Id}");

        return false;
    }

    private string GetMatchReportCellClass(ServiceMatchReport matchReport)
    {
        return matchReport.Result ? "text-primary" : "text-danger";
    }

    private IEnumerable<(IEnumerable<string> Regions, IEnumerable<string> RegionRefs)> GetCardRegions(IEnumerable<CardData> cards)
    {
        return cards
            ?.Select(c =>
            {
                if (string.IsNullOrWhiteSpace(c.Region) &&
                    string.IsNullOrWhiteSpace(c.RegionRef) &&
                    c.Regions != null &&
                    c.Regions.Any() &&
                    c.RegionRefs != null &&
                    c.RegionRefs.Any())
                {
                    return (c.Regions, c.RegionRefs);
                }

                return (new[] { c.Region }, new[] { c.RegionRef });
            })
            .DistinctBy(regions => string.Join(", ", regions.Regions))
            .OrderBy(regions => string.Join(", ", regions.Regions));
    }
}
