@page "/matchreports"

@using LoRWatcher.Stores
@using LoRWatcher.Caches
@using System.Threading;
@inject IWatcherDataStore watcherDataStore

@if (matchReports == null &&
    matchReportMetadata == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1><b>@matchReports?.First().PlayerName</b></h1>

    <br />

    <h4>Total Wins: @matchReportMetadata.TotalWins</h4>
    <h4>Total Losses: @matchReportMetadata.TotalLosses</h4>

    <br />
    @if (matchReports != null)
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Finish Time</th>
                    <th>Opponent Name</th>
                    <th>Result</th>
                    <th>Player Deck Code</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var matchReport in matchReports)
                {
                    var bgColour = matchReport.Result ? "text-primary" : "text-danger";

                    var timeSince = string.Empty;
                    TimeSpan timeSinceTime = DateTime.UtcNow.Subtract(matchReport.FinishTime.UtcDateTime);
                    if (timeSinceTime.TotalMinutes < 1)
                    {
                        timeSince = "< 1 minute ago";
                    }
                    else if (timeSinceTime.TotalHours < 1)
                    {
                        timeSince = string.Format("{0} minute(s) ago", (int)timeSinceTime.TotalMinutes);
                    }
                    else if (timeSinceTime.TotalDays < 1)
                    {
                        timeSince = string.Format("{0} hour(s) ago", (int)timeSinceTime.TotalHours);
                    }
                    else
                    {
                        timeSince = string.Format("{0} day(s) ago", (int)timeSinceTime.TotalDays);
                    }

                    <tr class="@bgColour">
                        <td>@timeSince</td>
                        <td>@matchReport.OpponentName</td>
                        @if (matchReport.Result == true)
                        {
                            <td>Win</td>
                        }
                        else
                        {
                            <td>Loss</td>
                        }
                        <td>@matchReport.PlayerDeckCode</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <nav aria-label="search match reports">
        <ul class="pagination justify-content-center">
            <li class="page-item">
                <a class="page-link" href="javascript:void(0)" @onclick="@(async (e) => await UpdateTableAsync(this.activePage - 1))" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Previous</span>
                </a>
            </li>
            @for (var i = 1; i <= this.numOfPages; i++)
            {
                var pageNum = i;
                var active = pageNum == this.activePage ? "active" : string.Empty;
                <li class="page-item @active"><a class="page-link" href="javascript:void(0)" @onclick="@(async (e) => await UpdateTableAsync(pageNum))">@pageNum</a></li>
            }
            <li class="page-item">
                <a class="page-link" href="javascript:void(0)" @onclick="@(async (e) => await UpdateTableAsync(this.activePage + 1))" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Next</span>
                </a>
            </li>
        </ul>
    </nav>
}

@code {
    private MatchReportMetadata matchReportMetadata;

    private IEnumerable<MatchReport> matchReports;

    private int numOfPages { get; set; }

    private int numOfRecords { get; set; } = 10;

    private int activePage { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        this.matchReportMetadata = await this.watcherDataStore.GetMatchReportMetadataAsync(CancellationToken.None);

        this.RefreshNumOfPages(this.matchReportMetadata.TotalGames);

        await this.UpdateTableAsync(this.activePage);
    }

    private async Task UpdateTableAsync(int pageNum)
    {
        this.matchReportMetadata = await this.watcherDataStore.GetMatchReportMetadataAsync(CancellationToken.None);

        this.RefreshNumOfPages(this.matchReportMetadata.TotalGames);

        if (pageNum > 0 &&
            pageNum <= this.numOfPages)
        {
            this.activePage = pageNum;
            var skip = this.numOfRecords * (this.activePage - 1);

            this.matchReports = await this.watcherDataStore.GetMatchReportsAsync(skip, this.numOfRecords, CancellationToken.None);
        }
    }

    private void RefreshNumOfPages(int totalGames)
    {
        if (totalGames % this.numOfRecords == 0)
        {
            this.numOfPages = totalGames / this.numOfRecords;
        }
        else
        {
            this.numOfPages = (totalGames / this.numOfRecords) + 1;
        }
    }
}
