@page "/"

@using LoRWatcherComponents
@using LoRWatcher.Caches
@using LoRWatcher.Events
@using LoRWatcher.Stores
@using LoRWatcher.Utils
@using System.Threading;
@using System.Diagnostics

@inject IWatcherDataStore watcherDataStore
@inject IWatcherEventHandler watcherEventHandler

<Container>
    <!-- TODO: Flickers occur when loading homepage... this is possibly due to this if/else here and the data taking a short time to load in. This could be made smoother somehow. -->
    @if (this.matchReports == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (this.matchReportMetadata == null || matchReportMetadata.TotalGames <= 0)
    {
        <div Class="col-12">
            <h2 class="text-black-hint" style="text-align: center; margin: 20px">
                <b>No matches have been recored. <br /> Play some matches to start using the LoR Watcher.</b>
            </h2>
        </div>
    }
    else
    {
        <Row Class="my-4">
            <div Class="col-4" style="display: flex;">
                <h1><b>@this.matchReportMetadata.PlayerName</b></h1>
                <div>
                    <a Style="display: flex; cursor: pointer; width: 20px; height: 20px; border-style: solid; border-color: rgba(0, 0, 0, 0.1); border-width: 1px; border-radius: 2px; margin: 2px 5px 2px 5px; padding: 5px">
                        <Icon Style="color: rgba(0,0,0,0.75); font-size: 8px;" Name="@("fa-wrench")" />
                        </a>
                    <a Style="display: flex; cursor: pointer; width: 20px; height: 20px; border-style: solid; border-color: rgba(0, 0, 0, 0.1); border-width: 1px; border-radius: 2px; margin: 2px 5px 5px 5px; padding: 5px">
                        <Icon Style="color: rgba(0,0,0,0.75); font-size: 8px;" Name="@("fa-sync")" />
                        </a>
                </div>
            </div>
            <div Class="col-6">
                <Row>
                    <TotalStats MatchReportMetadata="this.matchReportMetadata" />
                </Row>
            </div>
            <div Class="col-2">
                <ClientStatus />
            </div>
        </Row>
        <Row>
            <div Class="col-12">
                <MatchGrid TotalGames="@this.matchReportMetadata.TotalGames" InitialMatchReports="@this.matchReports" />
            </div>
        </Row>
    }
</Container>

@code {
    private const string Source = "Home";

    private MatchReportMetadata matchReportMetadata;

    private IEnumerable<MatchReport> matchReports;

    protected override async Task OnInitializedAsync()
    {
        this.RegisterEvents();

        await this.UpdateDataAsync();
    }

    private void RegisterEvents()
    {
        this.watcherEventHandler.TryAddEvent(WatcherEvents.GameFinished, Source, async () =>
        {
            await this.UpdateDataAsync();

#pragma warning disable CS4014
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
#pragma warning restore CS4014
        });
    }

    private async Task UpdateDataAsync()
    {
        var stopwatch = Stopwatch.StartNew();
        var metadataTask = Task.Run(async () =>
        {
            this.matchReportMetadata = await this.watcherDataStore.GetMatchReportsMetadataV2Async(CancellationToken.None);
        });

        var matchesTask = Task.Run(async () =>
        {
            this.matchReports = await this.watcherDataStore.GetMatchReportsAsync(0, RazorConstants.PageSize, CancellationToken.None);
        });

        await Task.WhenAll(
            new[]
            {
                metadataTask,
                matchesTask
            });

        var elapsed = stopwatch.Elapsed;
    }
}