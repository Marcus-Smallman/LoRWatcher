@page "/"

@using LoRWatcher.Caches
@using LoRWatcher.Stores
@using LoRWatcher.Utils
@using System.Threading;

@inject IWatcherDataStore watcherDataStore
@inject NavigationManager navigationManager

<Container>
    @if (matchReports == null && matchReportMetadata == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (matchReportMetadata.TotalGames <= 0)
    {
        <div Class="col-12">
            <h2 class="text-black-hint" style="text-align: center; margin: 20px">
                <b>No matches have been recored. <br /> Play some matches to start using the LoR Watcher.</b>
            </h2>
        </div>
    }
    else
    {
        <Row Class="my-4">
            <div Class="col-4">
                <h1><b>@matchReports.First().PlayerName</b></h1>
            </div>
            <div Class="col-8">
                <Row>
                    <div Class="col-4" Style="text-align: center">
                        <div>
                            <a Class="text-black-hint">Total Games:</a> @(matchReportMetadata.TotalGames) <a Class="text-black-hint" Style="font-size: 10px"><b>@(matchReportMetadata.TotalWins)W @(matchReportMetadata.TotalLosses)L</b></a>
                        </div>
                        <DoughnutChart @ref="winsLossesChart" TItem="int" OptionsObject="@winsLossesChartOptions" />
                        <div Style="padding-top: 10px">
                            <a Class="text-black-hint">Win Rate:</a> @(this.GetWinRate())
                        </div>
                    </div>
                    <div Class="col-4" Style="margin: auto; text-align: center">
                        <!--<div>
                            <a Class="text-black-hint">Most Played Region(s):</a> @(matchReportMetadata.MostPlayedRegions) <a Class="text-black-hint" Style="font-size: 10px"><b>@(matchReportMetadata.MostPlayedRegionsCount)G</b></a>
                        </div>-->
                        <!--<div Style="padding-top: 10px">
                            <a Class="text-black-hint">Highest Win Rate:</a> @(matchReportMetadata.HighestWinRateRegions) <a Class="text-black-hint" Style="font-size: 10px"><b>@(matchReportMetadata.HighestWinRateRegionsPercentage)%</b></a>
                        </div>-->
                        <!-- Most used region(s). Highest win rate with region(s) exlcuding expeditions -->
                    </div>
                    <div Class="col-4">
                        <!-- Expeditions completed. Total 7 win expeditions. -->
                    </div>
                </Row>
            </div>
        </Row>
        <Row>
            <div Class="col-12">
                <DataGrid TItem="MatchReport"
                          Data="@matchReports"
                          ShowPager="@showPager"
                          PageSize="@pageSize"
                          ReadData="@OnReadData"
                          TotalItems="@matchReportMetadata.TotalGames"
                          @bind-SelectedRow="@selectedMatchReport"
                          RowSelectable="@((matchReport) => this.RowSelected(matchReport))"
                          Hoverable="true">
                    <DataGridCommandColumn TItem="MatchReport" />
                    <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.FinishTime)" Caption="Finish Time">
                        <DisplayTemplate>
                            @(this.GetTimeSince((context as MatchReport)?.FinishTime.UtcDateTime))
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.OpponentName)" Caption="Opponent Name" />
                    <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.Result)" Caption="Result">
                        <DisplayTemplate>
                            @((context as MatchReport)?.Result == true ? "Won" : "Lost")
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.Regions)" Caption="Region(s)">
                        <DisplayTemplate>
                            @(string.Join(", ", (context as MatchReport)?.Regions ?? Enumerable.Empty<string>()))
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.Type)" Caption="Type" />
                </DataGrid>
            </div>
        </Row>
    }
</Container>

@code {
    private bool showPager = true;

    private int pageSize = 10;

    private MatchReport selectedMatchReport;

    private IEnumerable<MatchReport> matchReports;

    private MatchReportMetadata matchReportMetadata;

    private DoughnutChart<int> winsLossesChart;

    private object winsLossesChartOptions = new
    {
        Responsive = true,
        Animation = new
        {
            Duration = 0
        },
        Hover = new
        {
            AnimationDuration = 0
        },
        ResponsiveAnimationDuration = 0
    };

    protected override async Task OnInitializedAsync()
    {
        this.matchReportMetadata = await this.watcherDataStore.GetMatchReportMetadataAsync(CancellationToken.None);
        this.matchReports = await this.watcherDataStore.GetMatchReportsAsync(0, this.pageSize, CancellationToken.None);
    }

    private async Task OnReadData(DataGridReadDataEventArgs<MatchReport> e)
    {
        // TODO: Support filtering and sorting
        var skip = this.pageSize * (e.Page - 1);
        this.matchReports = await this.watcherDataStore.GetMatchReportsAsync(skip, this.pageSize, CancellationToken.None);
        this.matchReportMetadata = await this.watcherDataStore.GetMatchReportMetadataAsync(CancellationToken.None);

        StateHasChanged();
    }

    private bool RowSelected(MatchReport matchReport)
    {
        this.navigationManager.NavigateTo($"/match/{matchReport.Id}");

        return false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleWinLossesChartRedrawAsync();
        }
    }

    private async Task HandleWinLossesChartRedrawAsync()
    {
        await Retry.InvokeAsync(() => this.winsLossesChart != null, 1, int.MaxValue);
        await winsLossesChart.Clear();
        await winsLossesChart.AddLabels(new string[] { "Wins", "Losses" });
        await winsLossesChart.AddDataSet(new DoughnutChartDataset<int>
        {
            Label = "Wins and losses",
            Data = new List<int> { this.matchReportMetadata.TotalWins, this.matchReportMetadata.TotalLosses },
            BackgroundColor = new List<string> { ChartColor.FromRgba(156, 39, 176, 0.2f), ChartColor.FromRgba(244, 67, 54, 0.2f) },
            BorderColor = new List<string> { ChartColor.FromRgba(156, 39, 176, 1f), ChartColor.FromRgba(244, 67, 54, 1f) },
            BorderWidth = 1
        });

        await winsLossesChart.Update();
    }

    private string GetTimeSince(DateTime? dateTime)
    {
        var timeSince = string.Empty;
        if (dateTime.HasValue)
        {
            TimeSpan timeSinceTime = DateTime.UtcNow.Subtract(dateTime.Value);
            if (timeSinceTime.TotalMinutes < 1)
            {
                timeSince = "< 1 minute ago";
            }
            else if (timeSinceTime.TotalHours < 1)
            {
                timeSince = string.Format("{0} minute(s) ago", (int)timeSinceTime.TotalMinutes);
            }
            else if (timeSinceTime.TotalDays < 1)
            {
                timeSince = string.Format("{0} hour(s) ago", (int)timeSinceTime.TotalHours);
            }
            else
            {
                timeSince = string.Format("{0} day(s) ago", (int)timeSinceTime.TotalDays);
            }
        }

        return timeSince;
    }

    private string GetMatchReportCellClass(MatchReport matchReport)
    {
        return matchReport.Result ? "text-primary" : "text-danger";
    }

    private string GetWinRate()
    {
        var winRate = "0%";
        if (this.matchReportMetadata != null &&
            this.matchReportMetadata.TotalGames != 0 &&
            this.matchReportMetadata.TotalWins != 0)
        {
            var rate = 100 / (double)this.matchReportMetadata.TotalGames;
            rate *= (double)this.matchReportMetadata.TotalWins;

            winRate = $"{Math.Round(rate, 0)}%";
        }

        return winRate;
    }
}