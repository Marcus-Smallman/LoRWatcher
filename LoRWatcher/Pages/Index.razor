@page "/"

@using LoRWatcher.Services
@using LoRWatcherComponents
@using LoRWatcher.Caches
@using LoRWatcher.Events
@using LoRWatcher.Stores
@using LoRWatcher.Utils
@using System.Threading;
@using System.Diagnostics

@inject IWatcherDataStore watcherDataStore
@inject IWatcherService watcherService
@inject IWatcherEventHandler watcherEventHandler

<Container>
    @if (this.matchReports == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (this.matchReportMetadata == null || matchReportMetadata.TotalGames <= 0)
    {
        <div Class="col-12">
            <h2 class="text-black-hint" style="text-align: center; margin: 20px">
                <b>No matches have been recored. <br /> Play some matches to start using the LoR Watcher.</b>
            </h2>
        </div>
    }
    else
    {
        <Row Class="my-4">
            <div Class="col-4" style="display: flex;">
                <h1><b>@this.matchReportMetadata.PlayerName</b></h1>
                <div>
                    <a onclick="@(async () => await ShowModalAsync())" Style="display: flex; cursor: pointer; width: 20px; height: 20px; border-style: solid; border-color: rgba(0, 0, 0, 0.1); border-width: 1px; border-radius: 2px; margin: 2px 5px 2px 5px; padding: 5px">
                        <Icon Style="color: rgba(0,0,0,0.75); font-size: 8px;" Name="@("fa-wrench")" />
                    </a>
                    <a onclick="@(async () => await SyncAsync())" Style="display: flex; cursor: pointer; width: 20px; height: 20px; border-style: solid; border-color: rgba(0, 0, 0, 0.1); border-width: 1px; border-radius: 2px; margin: 2px 5px 5px 5px; padding: 5px">
                        <Icon Style="color: rgba(0,0,0,0.75); font-size: 8px;" Name="@("fa-sync")" />
                    </a>
                </div>
            </div>
            <div Class="col-6">
                <Row>
                    <TotalStats MatchReportMetadata="this.matchReportMetadata" />
                </Row>
            </div>
            <div Class="col-2">
                <ClientStatus />
            </div>
        </Row>
        <Row>
            <div Class="col-12">
                <MatchGrid TotalGames="@this.matchReportMetadata.TotalGames" InitialMatchReports="@this.matchReports" />
            </div>
        </Row>
    }
</Container>

@if (this.matchReportMetadata != null)
{    
    <Modal @ref="modalRef">
        <ModalContent Size="ModalSize.Small" Centered>
            <ModalBody Style="padding-bottom: 0px;">
                <Row style="display: flex; justify-content: center; align-items: baseline;">
                    <h4>@this.matchReportMetadata.PlayerName</h4><a style="padding: 5px;">#</a><TextEdit Size="Size.Small" Placeholder="Tag Line" Style="width: 20%;" @bind-Text="@this.tagLine" />
                </Row>
            </ModalBody>
            <ModalFooter>
                <div Class="col-12" style="flex: auto">
                    <Row>
                        <div Class="col-6" Style="justify-content: left;">
                            <Button Clicked="@(async () => await CloseModalAsync())" Color="Color.Secondary">Close</Button>
                        </div>
                        <div Class="col-6" Style="display: grid; justify-content: right;">
                            <Button Clicked="@(async () => await SaveTagLineAsync())" Disabled=@(this.tagLine == this.matchReportMetadata.TagLine) Color="Color.Primary">Save</Button>
                        </div>
                    </Row>
                </div>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {
    private const string Source = "Home";

    private MatchReportMetadata matchReportMetadata;

    private IEnumerable<MatchReport> matchReports;

    private Modal modalRef;

    private string tagLine;

    protected override async Task OnInitializedAsync()
    {
        this.RegisterEvents();

        await this.UpdateDataAsync();
    }

    private async Task ShowModalAsync()
    {
        this.tagLine = this.matchReportMetadata.TagLine;

        await modalRef.Show();
    }

    private async Task SyncAsync()
    {
        await this.UpdateDataAsync();

#pragma warning disable CS4014
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
#pragma warning restore CS4014
    }

    private async Task CloseModalAsync()
    {
        await modalRef.Close(CloseReason.UserClosing);
    }

    private async Task SaveTagLineAsync()
    {
        this.matchReportMetadata = await this.watcherDataStore.SetTagLineAsync(this.tagLine, CancellationToken.None);

        await CloseModalAsync();
    }

    private void RegisterEvents()
    {
        this.watcherEventHandler.TryAddEvent(WatcherEvents.GameFinished, Source, async () =>
        {
            await this.UpdateDataAsync();

#pragma warning disable CS4014
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
#pragma warning restore CS4014
        });
    }

    private async Task UpdateDataAsync()
    {
        var stopwatch = Stopwatch.StartNew();
        var metadataTask = Task.Run(async () =>
        {
            this.matchReportMetadata = await this.watcherDataStore.GetMatchReportsMetadataV2Async(CancellationToken.None);
        });

        var matchesTask = Task.Run(async () =>
        {
            var matchReportsResult = await this.watcherService.GetMatchReportsAsync(0, RazorConstants.PageSize, cancellationToken: CancellationToken.None);
            this.matchReports = matchReportsResult.Matches;
        });

        await Task.WhenAll(
            new[]
            {
                metadataTask,
                matchesTask
            });

        var elapsed = stopwatch.Elapsed;
    }
}