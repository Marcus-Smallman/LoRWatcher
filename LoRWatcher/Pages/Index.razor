@page "/"

@using LoRWatcher.Caches
@using LoRWatcher.Stores
@using LoRWatcher.Utils
@using System.Threading;
@using LoRWatcherComponents

@inject IWatcherDataStore watcherDataStore
@inject NavigationManager navigationManager

<Container>
    <!-- TODO: Flickers occur when loading homepage... this is possibly due to this if/else here and the data taking a short time to load in. This could be made smoother somehow. -->
    @if (matchReports == null || matchReportMetadata == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (matchReportMetadata.TotalGames <= 0)
    {
        <div Class="col-12">
            <h2 class="text-black-hint" style="text-align: center; margin: 20px">
                <b>No matches have been recored. <br /> Play some matches to start using the LoR Watcher.</b>
            </h2>
        </div>
    }
    else
    {
        <Row Class="my-4">
            <div Class="col-4">
                <h1><b>@matchReports.First().PlayerName</b></h1>
            </div>
            <div Class="col-8">
                <Row>
                    <TotalStats MatchReportMetadata="this.matchReportMetadata" />
                    <div Class="col-4" Style="margin: auto; text-align: center">
                        <!--<div>
                            <a Class="text-black-hint">Most Played Region(s):</a> @(matchReportMetadata.MostPlayedRegions) <a Class="text-black-hint" Style="font-size: 10px"><b>@(matchReportMetadata.MostPlayedRegionsCount)G</b></a>
                        </div>-->
                        <!--<div Style="padding-top: 10px">
                            <a Class="text-black-hint">Highest Win Rate:</a> @(matchReportMetadata.HighestWinRateRegions) <a Class="text-black-hint" Style="font-size: 10px"><b>@(matchReportMetadata.HighestWinRateRegionsPercentage)%</b></a>
                        </div>-->
                        <!-- Most used region(s). Highest win rate with region(s) exlcuding expeditions -->
                    </div>
                    <div Class="col-4">
                        <!-- Expeditions completed. Total 7 win expeditions. -->
                    </div>
                </Row>
            </div>
        </Row>
        <Row>
            <div Class="col-12">
                <DataGrid TItem="MatchReport"
                      Data="@matchReports"
                      ShowPager="@showPager"
                      PageSize="@pageSize"
                      ReadData="@OnReadData"
                      TotalItems="@matchReportMetadata.TotalGames"
                      @bind-SelectedRow="@selectedMatchReport"
                      RowSelectable="@((matchReport) => this.RowSelected(matchReport.Item))"
                      Hoverable="true">
                    <DataGridCommandColumn TItem="MatchReport" />
                    <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.FinishTime)" Caption="Finish Time">
                        <DisplayTemplate>
                            @((context as MatchReport)?.FinishTime.UtcDateTime.GetTimeSince() ?? string.Empty)
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.OpponentName)" Caption="Opponent Name">
                        <DisplayTemplate>
                            @((context as MatchReport)?.OpponentName.GetCardNameOpponentName())
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.Result)" Caption="Result">
                        <DisplayTemplate>
                            @((context as MatchReport)?.Result == true ? "Won" : "Lost")
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn CellClass="@((matchReport) => this.GetMatchReportCellClass(matchReport))" TItem="MatchReport" Field="@nameof(MatchReport.Regions)" Caption="Region(s)">
                        <DisplayTemplate>
                            @(string.Join(", ", (context as MatchReport)?.Regions ?? Enumerable.Empty<string>()))
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGrid>
            </div>
        </Row>
    }
</Container>

@code {
    private bool showPager = true;

    private int pageSize = 10;

    private MatchReport selectedMatchReport;

    private IEnumerable<MatchReport> matchReports;

    private MatchReportMetadata matchReportMetadata;

    protected override async Task OnInitializedAsync()
    {
        this.matchReportMetadata = await this.watcherDataStore.GetMatchReportMetadataAsync(CancellationToken.None);
        this.matchReports = await this.watcherDataStore.GetMatchReportsAsync(0, this.pageSize, CancellationToken.None);
    }

    private async Task OnReadData(DataGridReadDataEventArgs<MatchReport> e)
    {
        // TODO: Support filtering and sorting
        var skip = this.pageSize * (e.Page - 1);
        this.matchReports = await this.watcherDataStore.GetMatchReportsAsync(skip, this.pageSize, CancellationToken.None);
        this.matchReportMetadata = await this.watcherDataStore.GetMatchReportMetadataAsync(CancellationToken.None);

        StateHasChanged();
    }

    private bool RowSelected(MatchReport matchReport)
    {
        this.navigationManager.NavigateTo($"/match/{matchReport.Id}");

        return false;
    }

    private string GetMatchReportCellClass(MatchReport matchReport)
    {
        return matchReport.Result ? "text-primary" : "text-danger";
    }
}