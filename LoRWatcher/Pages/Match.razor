@page "/match/{id}"

@using LoRWatcher.Caches;
@using LoRWatcher.Stores;
@using LoRWatcher.Utils;
@using System.Threading;

@inject IWatcherDataStore watcherDataStore
@inject NavigationManager navigationManager

<Container>
    @if (matchReport == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Row Class="my-4">
            <div Class="col-6" Style="margin: auto">
                <Icon Class="text-black-hint" Style="cursor: pointer" @onclick="@((e) => { this.GoHome(); })" Name="@("fa-chevron-left fa-2x")" />
            </div>
            <div Class="col-6">
                <h4 Class="text-black-hint" Style="text-align: right; margin: auto">@(matchReport?.Type)</h4>
            </div>
        </Row>
        <Row Class="@(matchReport?.Result == true ? "text-primary" : "text-danger")" Style="margin-top: 1.5rem!important;">
            <div Class="col-5" Style="text-align: center">
                <h1 Style="margin: auto"><b>@matchReport.PlayerName</b></h1>
            </div>
            <div Class="col-2" Style="text-align: center; display: flex">
                <h4 Style="margin: auto"><b>V</b></h4>
            </div>
            <div Class="col-5" Style="text-align: center">
                <h1 Style="margin: auto"><b>@matchReport.OpponentName</b></h1>
            </div>
        </Row>
        <Row>
            <div Class="col-5" Style="text-align: center">
                <a Class="text-black-hint"><b>@(string.Join(", ", this.matchReport?.Regions ?? Enumerable.Empty<string>()))</b></a>
            </div>
            <div Class="col-2" Style="text-align: center; display: flex">
                <a Class="text-black-hint" Style="margin: auto">@(matchReport?.Result == true ? "Won" : "Lost")</a>
            </div>
        </Row>
        <Divider Type="DividerType.TextContent" Text="@(matchReport?.Result == true ? "Won" : "Lost")" />
        @if (matchReport?.PlayerDeckCode != null)
        {
            <Row Class="my-4">
                <div Class="col-2" Style="margin: auto">
                    <h4 Class="text-black-hint" Style="margin: auto">Deck</h4>
                </div>
                <div Class="col-10" Style="margin: auto; text-align: right">
                    <a Class="text-black-hint">Code: </a>@(matchReport.PlayerDeckCode)
                </div>
            </Row>
            @if (cards != null)
            {
                <Row Class="my-4">
                    <div Class="col-12" Style="margin: auto">
                        @foreach (var card in cards)
                        {
                        <Row Style="padding: 2px">
                            <a class="watcher-tooltip">
                                @card.Cost @card.Name @card.Count
                                <span>
                                    <img src="@($"./assets/set{int.Parse(card.CardCode.Substring(0, 2))}-lite-en_us/en_us/img/cards/{card.CardCode}.png")">
                                </span>
                            </a>
                        </Row>
                        }
                    </div>
                </Row>
            }
        }
        <!--<Row Class="my-4">
            <div Class="col-12" Style="margin: auto">
                <h4 Class="text-black-hint" Style="margin: auto">Timeline</h4>
            </div>
        </Row>
        <Row Class="my-4">
            <div Class="col-12" Style="margin: auto">
                @("<insert-timeline-here>")
            </div>
        </Row>-->
    }
</Container>

@code {
    [Parameter]
    public string Id { get; set; }

    private MatchReport matchReport;

    private IEnumerable<CardData> cards;

    protected override async Task OnInitializedAsync()
    {
        if (this.Id != null)
        {
            this.matchReport = await this.watcherDataStore.GetMatchReportByIdAsync(this.Id, CancellationToken.None);
            this.cards = matchReport?.PlayerDeckCode.GetCardsFromCode();
        }
    }

    private void GoHome()
    {
        this.navigationManager.NavigateTo("");
    }
}