@page "/match/{id}"

@using LoRWatcher.Caches;
@using LoRWatcher.Stores;
@using LoRWatcher.Utils;
@using LoRWatcher.Logger;
@using System.Threading;

@inject IJSRuntime JSRuntime
@inject IWatcherDataStore watcherDataStore
@inject NavigationManager navigationManager
@inject ILogger logger;

<Container>
    @if (this.matchReport == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Row Class="my-4">
            <div Class="col-12" Style="margin: auto">
                <Icon Class="text-black-hint" Style="cursor: pointer" @onclick="@((e) => { this.GoHome(); })" Name="@("fa-chevron-left fa-2x")" />
            </div>
        </Row>
        <Row Class="@(matchReport?.Result == true ? "text-primary" : "text-danger")" Style="margin-top: 1.5rem!important;">
            <div Class="col-5" Style="text-align: center">
                <h1 Style="margin: auto"><b>@matchReport.PlayerName</b></h1>
            </div>
            <div Class="col-2" Style="text-align: center; display: flex">
                <h4 Style="margin: auto"><b>V</b></h4>
            </div>
            <div Class="col-5" Style="text-align: center">
                <h1 Style="margin: auto"><b>@(this.matchReport.OpponentName.GetCardNameOpponentName())</b></h1>
            </div>
        </Row>
        <Row>
            <div Class="col-5" />
            <div Class="col-2" Style="text-align: center; display: flex">
                <a Class="text-black-hint" Style="margin: auto">@(matchReport?.Result == true ? "Won" : "Lost")</a>
            </div>
        </Row>
        <Divider Type="DividerType.TextContent" Text="@(matchReport?.Result == true ? "Won" : "Lost")" />
        @if (matchReport?.PlayerDeckCode != null)
        {
            <Row>
                <div Class="col-12" Style="margin: auto; display: flex;">
                    <a Class="text-black-hint" Style="margin-left: auto;">Deck Code</a>
                </div>
            </Row>
            <Row>
                <div Class="col-1" Style="margin: auto">
                    <h4 Class="text-black-hint" Style="margin: auto; width: 200px;">@(matchReport.FinishTime.UtcDateTime.GetTimeSince())</h4>
                </div>
                <div Class="col-11" Style="margin: auto; display: flex; padding-top: 5px;">
                    <a Style="margin-left: auto;">@(matchReport.PlayerDeckCode)</a>
                </div>
            </Row>
            @if (cards != null)
            {
                <Row Class="my-4">
                    <div Class="col-2">
                    </div>
                    <div Class="col-5" Style="display: flex; flex-wrap: wrap;">
                        @foreach (var type in this.GetCardTypes())
                        {
                            var typedCards = this.cards.Where(c => (c.Type == type && c.Supertype == string.Empty) || (c.Supertype == type));
                            if (typedCards.Any())
                            {
                                <div Class="col-6" Style="text-align: center;">
                                    <h6 Class="text-black-hint" Style="margin-top: .5rem; font-weight: normal;">@(type)(s)</h6>
                                    <Row Style="display: block;">
                                        @foreach (var card in typedCards)
                                        {
                                            <Row Style="padding: 2px;">
                                                <a Class="watcher-tooltip" Style="background-color: #f5f5f5;">
                                                    <Badge Style="display: inline-block; position: initial; border: 1px #1a6fb3 solid; border-radius: 0px;" Color="Color.Info">@(card.Cost)</Badge> @card.Name <Badge Style="display: inline-block; position: initial;" Color="Color.Light">x@(card.Count)</Badge>
                                                    <span>
                                                        <img src="@(this.GetCardImagePath(card.Set, card.CardCode))">
                                                    </span>
                                                </a>
                                            </Row>
                                        }
                                    </Row>
                                </div>
                            }
                        }
                    </div>
                    <div Class="col-3">
                        <Row Class="my-4" Style="text-align: center; display: grid;">
                            <Row Style="margin: auto">
                                <h5 Class="text-black-hint">Regions</h5>
                            </Row>
                            <Row Style="margin: auto">
                                @foreach (var regions in this.GetCardRegions())
                                {
                                    <Tooltip Style="position: relative; padding: 5px 5px 0px 5px; margin-top: -5px;" Text=@(string.Join(", ", regions.Regions))>
                                        @foreach (var regionRefs in regions.RegionRefs)
                                        {
                                            <img Style="max-height: 35px;" src="@($"./assets/core-en_us/en_us/img/regions/icon-{regionRefs.ToLower()}.png")">
                                        }
                                        <Badge Style="position: absolute; margin-top: 25px; margin-left: -15px; border: 1px grey solid; border-radius: 0px; font-size: smaller;" Color="Color.Light">
                                            x@(this.cards
                            .Select(c =>
                            {
                            if (c.Regions != null &&
                            c.Regions.Any())
                            {
                            var cRegions = string.Join(", ", c.Regions);
                            var dRegions = string.Join(", ", regions.Regions);

                            if (cRegions == dRegions)
                            {
                            return c.Count;
                            }
                            }

                            if (regions.Regions.SequenceEqual(new[] { c.Region }))
                            {
                            return c.Count;
                            }

                            return 0;
                            })
                            .Sum())
                                        </Badge>
                                    </Tooltip>
                                }
                            </Row>
                        </Row>
                        <Row Class="my-4" Style="text-align: center; display: block;">
                            <h5 Class="text-black-hint">Mana Cost</h5>
                            <Row>
                                <div Class="col-1" />
                                <div Class="col-10">
                                    <Row>
                                        <!-- TODO: When possible change card count from tooltip to value above bar -->
                                        <BarChart OptionsObject="@manaChartOptions" @ref="manaChart" TItem="int" />
                                    </Row>
                                </div>
                            </Row>
                        </Row>
                    </div>
                </Row>
            }
        }
        @if (this.matchReport.Snapshots?.Any() == true)
        {
            <Divider />
            <Row>
                <div Class="col-12" Style="text-align: center; display: flex">
                    <h4 Class="text-black-hint" Style="margin: auto">Replay</h4>
                </div>
            </Row>
            <Row>
                <div Class="col-12" Style="margin: auto; display: flex; margin-top: -23px;">
                    <a Class="text-black-hint" Style="margin-left: auto;">Game Time</a>
                </div>
            </Row>
            <Row>
                <div Class="col-12" Style="margin: auto; display: flex; padding-top: 5px;">
                    <!-- TODO: Make this human readable. -->
                    <a Style="margin-left: auto;">@(this.GetGameTime().ToString("hh':'mm':'ss'.'ff"))</a>
                </div>
            </Row>
            <Row Class="my-4">
                <div Style="flex: 1; overflow-x: scroll; display: flex;">
                    @foreach (var snapshot in this.matchReport.Snapshots)
                    {
                        <Tooltip Style="display: flex; min-height: min-content;" Text="@(DateTimeOffset.Parse(snapshot.Key).DateTime.ToString())">
                            <a onclick="@(async () => await ShowModal(snapshot))" ElementId="snapshot" Style="width: 10px; height: 10px; border-style: solid; border-color: red; border-width: 1px"> </a>
                        </Tooltip>
                    }
                </div>
            </Row>

        }
    }
</Container>

<Modal @ref="modalRef">
    <ModalContent Size="ModalSize.Large" tabindex="0" @onkeydown="@MoveSnapshot" Centered>
        @if (this.currentSnapshot.Value != null)
        {
            <ModalHeader Style="display: block;">
                <div Class="col-12">
                    <Row>
                        <h4 Class="text-black-hint" Style="margin: auto; padding-left: 12.56px; z-index: 1; background-color: rgba(255,255,255,0.5); border-radius: 2px;">@(DateTimeOffset.Parse(this.currentSnapshot.Key).DateTime.ToShortDateString())</h4>
                        <CloseButton />
                    </Row>
                </div>
                <div Class="col-12">
                    <Row>
                        <a Class="text-black-hint">Start Time</a>
                        <a Class="text-black-hint" Style="margin-left: auto;">End Time</a>
                    </Row>
                </div>
                <div Class="col-12">
                    <Row>
                        <a>@(DateTimeOffset.Parse(this.matchReport.Snapshots.Keys[0]).DateTime.ToString("HH:mm:ss.ff"))</a>
                        <a Style="margin-left: auto; z-index: 1; background-color: rgba(255,255,255,0.5); border-radius: 2px;">@(this.GetCurrentTime(this.currentSnapshot.Key).ToString("hh':'mm':'ss'.'ff"))</a>
                        <a Style="margin-left: auto;">@(DateTimeOffset.Parse(this.matchReport.Snapshots.Keys[this.matchReport.Snapshots.Keys.Count-1]).DateTime.ToString("HH:mm:ss.ff"))</a>
                    </Row>
                </div>
            </ModalHeader>
            <ModalBody Style="padding: 0rem 1.5rem 6.5rem 1.5rem;">
                @{
                    var aspectRatio = ((double)this.currentSnapshot.Value.ScreenHeight / (double)this.currentSnapshot.Value.ScreenWidth);
                    var aspectRatioPercentage = aspectRatio * 100;
                    <div Style="outline:none; position: relative; padding-bottom: @(aspectRatioPercentage)%;" tabindex="0" @ref="replayControls">
                        <div Style="width: 100%; height: 100%; position: absolute;">
                            <img Style="width: 100%; height: 100%; position: absolute; border-radius: 2px; border-style: solid; border-color: gray; border-width: 1px;" Src="./images/board-default.png">
                            @foreach (var rectangle in this.currentSnapshot.Value.Rectangles.OrderBy(r => r.Height))
                            {
                                var width = ((double)100 / (double)this.currentSnapshot.Value.ScreenWidth) * rectangle.Width;
                                var height = ((double)100 / (double)this.currentSnapshot.Value.ScreenHeight) * rectangle.Height;
                                var topLeftX = ((double)100 / (double)this.currentSnapshot.Value.ScreenWidth) * rectangle.TopLeftX;
                                var topLeftY = aspectRatioPercentage - ((((double)100 / (double)this.currentSnapshot.Value.ScreenHeight) * rectangle.TopLeftY) * aspectRatio);

                                <div Style="width: @(width)%; height: @(height)%; margin-left: @(topLeftX)%; margin-top: @(topLeftY)%; position: absolute; border-style: solid; border-color: @(rectangle.LocalPlayer ? "rgba(156, 39, 176, 1)" : "rgba(244, 67, 54, 1)"); border-width: 1px; border-radius: 2px; background-color: @(rectangle.LocalPlayer ? "rgba(156, 39, 176, 0.5)" : "rgba(244, 67, 54, 0.5)"); word-break: break-word;">
                                    @{
                                        var card = CardExtensions.GetCardData().FirstOrDefault(c => c.CardCode.Equals(rectangle.CardCode, StringComparison.OrdinalIgnoreCase) == true);
                                        if (card != null)
                                        {
                                            <a class="watcher-tooltip">
                                                <img Style="width: 100%; height: 100%; object-fit: contain;" Src="@(this.GetCardImagePath(card.Set, card.CardCode))">
                                                <span>
                                                    <img src="@(this.GetCardImagePath(card.Set, card.CardCode))">
                                                </span>
                                            </a>
                                        }
                                        else
                                        {
                                            if (rectangle.CardCode != "face")
                                            {
                                                <p Style="text-align: center; color: rgba(255,255,255, 0.8)">@rectangle.CardCode</p>
                                            }
                                        }
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </ModalBody>
            <ModalFooter Style="justify-content: normal">
                <Button Color="Color.Primary" Clicked="@MovePrevious">Previous</Button>
                <Button Style="margin-left: auto;" Color="Color.Primary" Clicked="@MoveNext">Next</Button>
            </ModalFooter>
        }
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public string Id { get; set; }

    private MatchReport matchReport;

    private IEnumerable<CardData> cards;

    private BarChart<int> manaChart;

    private Modal modalRef;

    private ElementReference replayControls;

    private KeyValuePair<string, Snapshot> currentSnapshot;

    private async Task ShowModal(KeyValuePair<string, Snapshot> snapshot)
    {
        this.currentSnapshot = snapshot;

        await modalRef.Show();

        await replayControls.FocusAsync();
    }

    private void Next()
    {
        var index = this.matchReport.Snapshots.IndexOfKey(this.currentSnapshot.Key);
        if (index < this.matchReport.Snapshots.Count - 1)
        {
            var nextKey = this.matchReport.Snapshots.Keys[index + 1];
            var nextSnapshot = this.matchReport.Snapshots[nextKey];

            this.currentSnapshot = new KeyValuePair<string, Snapshot>(nextKey, nextSnapshot);
        }
    }

    private Task MoveNext()
    {
        Next();

        return Task.CompletedTask;
    }

    private void Previous()
    {
        var index = this.matchReport.Snapshots.IndexOfKey(this.currentSnapshot.Key);
        if (index > 0)
        {
            var previousKey = this.matchReport.Snapshots.Keys[index - 1];
            var previousSnapshot = this.matchReport.Snapshots[previousKey];

            this.currentSnapshot = new KeyValuePair<string, Snapshot>(previousKey, previousSnapshot);
        }
    }

    private Task MovePrevious()
    {
        Previous();

        return Task.CompletedTask;
    }

    private Task MoveSnapshot(KeyboardEventArgs e)
    {
        if (e.Code == "ArrowLeft")
        {
            Previous();
        }
        else if (e.Code == "ArrowRight")
        {
            Next();
        }

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        if (this.Id != null)
        {
            this.matchReport = await this.watcherDataStore.GetMatchReportByIdAsync(this.Id, CancellationToken.None);
            this.cards = this.matchReport?.PlayerDeckCode.GetCardsFromCode();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await manaChart.Clear();

            await manaChart.AddLabelsDatasetsAndUpdate(Labels, GetManaChartDataset());
        }
    }

    private object manaChartOptions = new
    {
        AspectRatio = 2,
        Tooltips = new
        {
            Enabled = true
        },
        Legend = new
        {
            Display = false
        },
        Scales = new
        {
            Y = new
            {
                Grid = new
                {
                    Display = false
                },
                Ticks = new
                {
                    Display = false,
                    BeginAtZero = true
                }
            }
        },
        Animation = new
        {
            Duration = 0
        },
        ResponsiveAnimationDuration = 0
    };

    private BarChartDataset<int> GetManaChartDataset()
    {
        return new BarChartDataset<int>
            {
                Label = "Card Count",
                Data = GetDeckMana(),
                BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(54, 162, 235, 0.2f), 8).ToArray(),
                BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(54, 162, 235, 1f), 8).ToArray(),
                BorderWidth = 1
            };
    }

    private string[] Labels = { "0", "1", "2", "3", "4", "5", "6", "+" };

    private List<int> GetDeckMana()
    {

        return new List<int>
        {
            this.cards.Where(c => c.Cost == 0).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 1).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 2).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 3).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 4).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 5).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 6).Sum(c => c.Count),
            this.cards.Where(c => c.Cost > 6).Sum(c => c.Count),
        };
    }

    private void GoHome()
    {
        this.navigationManager.NavigateTo("", true);
    }

    private IEnumerable<(IEnumerable<string> Regions, IEnumerable<string> RegionRefs)> GetCardRegions()
    {
        return this.cards
            ?.Select(c =>
            {
                if (string.IsNullOrWhiteSpace(c.Region) &&
                    string.IsNullOrWhiteSpace(c.RegionRef) &&
                    c.Regions != null &&
                    c.Regions.Any() &&
                    c.RegionRefs != null &&
                    c.RegionRefs.Any())
                {
                    return (c.Regions, c.RegionRefs);
                }

                return (new[] { c.Region }, new[] { c.RegionRef });
            })
            .DistinctBy(regions => string.Join(", ", regions.Regions))
            .OrderBy(regions => string.Join(", ", regions.Regions));
    }

    private IEnumerable<string> GetCardTypes()
    {
        var cardTypes = Enumerable.Empty<string>();

        var types = this.cards
            .Select(c => c.Type)
            .Where(s => s != string.Empty)
            .Distinct();

        var superTypes = this.cards
            .Select(c => c.Supertype)
            .Where(s => s != string.Empty)
            .Distinct();

        if (types != null &&
            types.Any() == true)
        {
            if (superTypes != null &&
                superTypes.Any() == true)
            {
                cardTypes = types.Concat(superTypes);
            }
            else
            {
                cardTypes = types;
            }

        }

        return cardTypes
            .Distinct()
            .OrderByDescending(s => s);
    }

    public string GetCardImagePath(string set, string cardCode)
    {
        return $"./assets/{set.ToLower()}-lite-en_us/en_us/img/cards/{cardCode}.png";
    }

    public TimeSpan GetGameTime()
    {
        var startKey = this.matchReport.Snapshots.Keys[0];
        var endKey = this.matchReport.Snapshots.Keys[this.matchReport.Snapshots.Keys.Count - 1];

        return DateTimeOffset.Parse(endKey) - DateTimeOffset.Parse(startKey);
    }

    public TimeSpan GetCurrentTime(string currentKey)
    {
        var startKey = this.matchReport.Snapshots.Keys[0];

        return DateTimeOffset.Parse(currentKey) - DateTimeOffset.Parse(startKey);
    }
}