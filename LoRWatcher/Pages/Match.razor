@page "/match/{id}"

@using LoRWatcher.Caches;
@using LoRWatcher.Stores;
@using LoRWatcher.Utils;
@using LoRWatcher.Logger;
@using System.Threading;

@inject IJSRuntime JSRuntime
@inject IWatcherDataStore watcherDataStore
@inject NavigationManager navigationManager
@inject ILogger logger;

<Container>
    @if (this.matchReport == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Row Class="my-4">
            <div Class="col-12" Style="margin: auto">
                <Icon Class="text-black-hint" Style="cursor: pointer" @onclick="@((e) => { this.GoHome(); })" Name="@("fa-chevron-left fa-2x")" />
            </div>
        </Row>
        <Row Class="@(matchReport?.Result == true ? "text-primary" : "text-danger")" Style="margin-top: 1.5rem!important;">
            <div Class="col-5" Style="text-align: center">
                <h1 Style="margin: auto"><b>@matchReport.PlayerName</b></h1>
            </div>
            <div Class="col-2" Style="text-align: center; display: flex">
                <h4 Style="margin: auto"><b>V</b></h4>
            </div>
            <div Class="col-5" Style="text-align: center">
                <h1 Style="margin: auto"><b>@matchReport.OpponentName</b></h1>
            </div>
        </Row>
        <Row>
            <div Class="col-5" />
            <div Class="col-2" Style="text-align: center; display: flex">
                <a Class="text-black-hint" Style="margin: auto">@(matchReport?.Result == true ? "Won" : "Lost")</a>
            </div>
        </Row>
        <Divider Type="DividerType.TextContent" Text="@(matchReport?.Result == true ? "Won" : "Lost")" />
        @if (matchReport?.PlayerDeckCode != null)
        {
            <Row>
                <div Class="col-12" Style="margin: auto; display: flex;">
                    <a Class="text-black-hint" Style="margin-left: auto;">Deck Code</a>
                </div>
            </Row>
            <Row>
                <div Class="col-1" Style="margin: auto">
                    <h4 Class="text-black-hint" Style="margin: auto; width: 200px;">@(matchReport.FinishTime.UtcDateTime.GetTimeSince())</h4>
                </div>
                <div Class="col-11" Style="margin: auto; display: flex; padding-top: 5px;">
                    <a Style="margin-left: auto;">@(matchReport.PlayerDeckCode)</a>
                </div>
            </Row>
            @if (cards != null)
            {
                <Row Class="my-4">
                    <div Class="col-2">
                    </div>
                    <div Class="col-5" Style="display: flex; flex-wrap: wrap;">
                        @foreach (var type in this.GetCardTypes())
                        {
                            var typedCards = this.cards.Where(c => (c.Type == type && c.Supertype == string.Empty) || (c.Supertype == type));
                            if (typedCards.Any())
                            {
                                <div Class="col-6" Style="text-align: center;">
                                    <h6 Class="text-black-hint" Style="margin-top: .5rem; font-weight: normal;">@(type)(s)</h6>
                                    <Row Style="display: block;">
                                        @foreach (var card in typedCards)
                                        {
                                            <Row Style="padding: 2px;">
                                                <a class="watcher-tooltip">
                                                    <Badge Style="display: inline-block; position: initial; border: 1px #1a6fb3 solid; border-radius: 0px;" Color="Color.Info">@(card.Cost)</Badge> @card.Name <Badge Style="display: inline-block; position: initial;" Color="Color.Light">x@(card.Count)</Badge>
                                                    <span>
                                                        <img src="@($"./assets/set{int.Parse(card.CardCode.Substring(0, 2))}-lite-en_us/en_us/img/cards/{card.CardCode}.png")">
                                                    </span>
                                                </a>
                                            </Row>
                                        }
                                    </Row>
                                </div>
                            }
                        }
                    </div>
                    <div Class="col-3">
                        <Row Class="my-4" Style="text-align: center; display: grid;">
                            <Row Style="margin: auto">
                                <h5 Class="text-black-hint">Regions</h5>
                            </Row>
                            <Row Style="margin: auto">
                                @foreach (var regions in this.GetCardRegions())
                                {
                                    <Tooltip Style="position: relative; padding: 5px 5px 0px 5px; margin-top: -5px;" Text=@(string.Join(", ", regions.Regions))>
                                        @foreach (var regionRefs in regions.RegionRefs)
                                        {
                                            <img Style="max-height: 35px;" src="@($"./assets/core-en_us/en_us/img/regions/icon-{regionRefs.ToLower()}.png")">
                                        }
                                        <Badge Style="position: absolute; margin-top: 25px; margin-left: -15px; border: 1px grey solid; border-radius: 0px; font-size: smaller;" Color="Color.Light">
                                            x@(this.cards
                                                .Select(c =>
                                                {
                                                    if (c.Regions != null &&
                                                        c.Regions.Any())
                                                    {
                                                        var cRegions = string.Join(", ", c.Regions);
                                                        var dRegions = string.Join(", ", regions.Regions);

                                                        if (cRegions == dRegions)
                                                        {
                                                            return c.Count;
                                                        }
                                                    }

                                                    if (regions.Regions.SequenceEqual(new[] { c.Region }))
                                                    {
                                                        return c.Count;
                                                    }

                                                    return 0;
                                                })
                                                .Sum())
                                        </Badge>
                                    </Tooltip>
                                }
                            </Row>
                        </Row>
                        <Row Class="my-4" Style="text-align: center; display: block;">
                            <h5 Class="text-black-hint">Mana Cost</h5>
                            <Row>
                                <div Class="col-1" />
                                <div Class="col-10">
                                    <Row>
                                        <!-- TODO: When possible change card count from tooltip to value above bar -->
                                        <BarChart OptionsObject="@manaChartOptions" @ref="manaChart" TItem="int" />
                                    </Row>
                                </div>
                            </Row>
                        </Row>
                    </div>
                </Row>
            }
        }
        <!--<Row Class="my-4">
            <div Class="col-12" Style="margin: auto">
                <h4 Class="text-black-hint" Style="margin: auto">Timeline</h4>
            </div>
        </Row>
        <Row Class="my-4">
            <div Class="col-12" Style="margin: auto">
        @("<insert-timeline-here>")
            </div>
        </Row>-->
    }
</Container>

@code {
    [Parameter]
    public string Id { get; set; }

    private MatchReport matchReport;

    private IEnumerable<CardData> cards;

    private BarChart<int> manaChart;

    protected override async Task OnInitializedAsync()
    {
        if (this.Id != null)
        {
            this.matchReport = await this.watcherDataStore.GetMatchReportByIdAsync(this.Id, CancellationToken.None);
            this.cards = matchReport?.PlayerDeckCode.GetCardsFromCode();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await manaChart.Clear();

            await manaChart.AddLabelsDatasetsAndUpdate(Labels, GetManaChartDataset());
        }
    }

    private object manaChartOptions = new
    {
        AspectRatio = 2,
        Tooltips = new
        {
            Enabled = true
        },
        Legend = new
        {
            Display = false
        },
        Scales = new
        {
            Y = new
            {
                Grid = new
                {
                    Display = false
                },
                Ticks = new
                {
                    Display = false,
                    BeginAtZero = true
                }
            }
        },
        Animation = new
        {
            Duration = 0
        },
        ResponsiveAnimationDuration = 0
    };

    private BarChartDataset<int> GetManaChartDataset()
    {
        return new BarChartDataset<int>
            {
                Label = "Card Count",
                Data = GetDeckMana(),
                BackgroundColor = Enumerable.Repeat<string>(ChartColor.FromRgba(54, 162, 235, 0.2f), 8).ToArray(),
                BorderColor = Enumerable.Repeat<string>(ChartColor.FromRgba(54, 162, 235, 1f), 8).ToArray(),
                BorderWidth = 1
            };
    }

    private string[] Labels = { "0", "1", "2", "3", "4", "5", "6", "+" };

    private List<int> GetDeckMana()
    {

        return new List<int>
        {
            this.cards.Where(c => c.Cost == 0).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 1).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 2).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 3).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 4).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 5).Sum(c => c.Count),
            this.cards.Where(c => c.Cost == 6).Sum(c => c.Count),
            this.cards.Where(c => c.Cost > 6).Sum(c => c.Count),
        };
    }

    private void GoHome()
    {
        this.navigationManager.NavigateTo("", true);
    }

    private IEnumerable<(IEnumerable<string> Regions, IEnumerable<string> RegionRefs)> GetCardRegions()
    {
        return this.cards
            ?.Select(c =>
            {
                if (string.IsNullOrWhiteSpace(c.Region) &&
                    string.IsNullOrWhiteSpace(c.RegionRef) &&
                    c.Regions != null &&
                    c.Regions.Any() &&
                    c.RegionRefs != null &&
                    c.RegionRefs.Any())
                {
                    return (c.Regions, c.RegionRefs);
                }

                return (new[] { c.Region }, new[] { c.RegionRef });
            })
            .DistinctBy(regions => string.Join(", ", regions.Regions))
            .OrderBy(regions => string.Join(", ", regions.Regions));
    }

    private IEnumerable<string> GetCardTypes()
    {
        var cardTypes = Enumerable.Empty<string>();

        var types = this.cards
            .Select(c => c.Type)
            .Where(s => s != string.Empty)
            .Distinct();

        var superTypes = this.cards
            .Select(c => c.Supertype)
            .Where(s => s != string.Empty)
            .Distinct();

        if (types != null &&
            types.Any() == true)
        {
            if (superTypes != null &&
                superTypes.Any() == true)
            {
                cardTypes = types.Concat(superTypes);
            }
            else
            {
                cardTypes = types;
            }

        }

        return cardTypes
            .Distinct()
            .OrderByDescending(s => s);
    }
}